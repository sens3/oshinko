#!/usr/bin/env bash

# forked from https://github.com/jonathanpenn/AutomationExample

# NOTE:
# You might need to edit this based on your directory and project structure!

# parse out project name from xcodebuild -list output
APP_NAME=$(xcodebuild -list | grep -E "Information about" | sed 's/\Information about [^\"]* "\([^\"]*\)\":/\1/')

# we assume your UIAutomation tests are in MyApp/UIAutomationTests
TEST_DIR=$APP_NAME/UIAutomationTests
OSHINKO_DIR=$TEST_DIR/js/oshinko

# define and setup build directory
BUILD_DIR=/tmp/xcode-builds/$APP_NAME
mkdir -p $BUILD_DIR

# we will store the instruments output in automation_results/
rm -rf automation_results
mkdir -p automation_results

# create .oshinko directory
mkdir -p .oshinko

# build the project
xcodebuild -sdk iphonesimulator -configuration Debug build CONFIGURATION_BUILD_DIR=$BUILD_DIR

#colors
green="\033[33;32m"
red="\033[33;31m"
reset="\033[0m"

# init return code
return_code=0

# init failed features buffer
failed_features="Failed Features: \n"

function run_feature {
    
    # 'store' current feature file in .oshinko
	#  makes passing it to JS easy
	if [ -f .oshinko/feature ]; then
        rm .oshinko/feature
    fi
    echo -n $feature > .oshinko/feature
  
    ./$OSHINKO_DIR/bin/unix_instruments \
        -D automation_results/trace \
        -t $OSHINKO_DIR/bin/UIAutomationTemplate.tracetemplate \
        $BUILD_DIR/$APP_NAME.app \
        -e UIARESULTSPATH automation_results \
        -e UIASCRIPT $TEST_DIR/js/main.js \
        -e UITEST 1

    if [[ $? != 0 ]]; then
        return_code=1
        failed_features="$failed_features\n$feature"
    fi
}

# read feature name from args
feature=$1

if [ $feature ]; then
    
    run_feature
    
else
    
    # run instruments with oshinko for every *.feature file
    for feature in $TEST_DIR/features/*.feature
    do
    	run_feature
    done
    
fi

# print summary

echo -e "\n\n"

if [[ $return_code == 0 ]]; then
  echo -e "${green}All features passed!$reset"
else
  echo -e "$red$failed_features$reset"
fi

echo -e "\n\n"

exit $return_code

